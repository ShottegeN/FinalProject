// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToyShop.Data;

#nullable disable

namespace ToyShop.Data.Migrations
{
    [DbContext(typeof(ToyShopDbContext))]
    [Migration("20241211200638_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ToyShop.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for the Address entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingNumber")
                        .HasColumnType("int")
                        .HasComment("Optional building number");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key reference to the City entity");

                    b.Property<string>("Entrance")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Optional entrance information for the address");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasComment("House number or address number");

                    b.Property<string>("OtherAddressInformation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Optional additional information for the address");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Street name of the address with a maximum length constraint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 4,
                            Number = 23,
                            OtherAddressInformation = "Адрес за лично вземане на поръчката.",
                            StreetName = "бул. Тракия"
                        },
                        new
                        {
                            Id = 2,
                            BuildingNumber = 2,
                            CityId = 1,
                            Number = 45,
                            OtherAddressInformation = "Срещу книжарницата",
                            StreetName = "ул. Цар Иван Асен II"
                        },
                        new
                        {
                            Id = 3,
                            BuildingNumber = 5,
                            CityId = 2,
                            Entrance = "Б",
                            Number = 89,
                            OtherAddressInformation = "До аптеката",
                            StreetName = "бул. Сливница"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 3,
                            Entrance = "В",
                            Number = 7,
                            OtherAddressInformation = "Близо до парка",
                            StreetName = "ул. Александровска"
                        },
                        new
                        {
                            Id = 5,
                            BuildingNumber = 1,
                            CityId = 4,
                            Number = 23,
                            OtherAddressInformation = "До стадиона",
                            StreetName = "ул. Сан Стефано"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Entrance = "Г",
                            Number = 101,
                            OtherAddressInformation = "До университета",
                            StreetName = "ул. Княз Борис I"
                        },
                        new
                        {
                            Id = 7,
                            BuildingNumber = 3,
                            CityId = 1,
                            Number = 18,
                            OtherAddressInformation = "Близо до пазара",
                            StreetName = "ул. Граф Игнатиев"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 5,
                            Entrance = "Д",
                            Number = 33,
                            OtherAddressInformation = "Срещу банката",
                            StreetName = "ул. Дунав"
                        },
                        new
                        {
                            Id = 9,
                            BuildingNumber = 4,
                            CityId = 3,
                            Number = 50,
                            OtherAddressInformation = "До търговския център",
                            StreetName = "бул. Левски"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 1,
                            Entrance = "А",
                            Number = 12,
                            OtherAddressInformation = "До НДК",
                            StreetName = "бул. Витоша"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 4,
                            Entrance = "Е",
                            Number = 99,
                            OtherAddressInformation = "Близо до музея",
                            StreetName = "ул. Шипка"
                        });
                });

            modelBuilder.Entity("ToyShop.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for the Category entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the category with a maximum length constraint");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Еленчета"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Мечета"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Жирафчета"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Зайчета"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Кученца"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Еднорози"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Мишлета"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Шапки"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Скрънчи"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Торти"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Цветя"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Одеала"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Плодчета"
                        });
                });

            modelBuilder.Entity("ToyShop.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for the City entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the city with a maximum length constraint");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Post code of the city with a maximum length constraint");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "София",
                            PostCode = "1000"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пловдив",
                            PostCode = "4000"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Варна",
                            PostCode = "9000"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Бургас",
                            PostCode = "8000"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Русе",
                            PostCode = "7000"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Стара Загора",
                            PostCode = "6000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Плевен",
                            PostCode = "5800"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Велико Търново",
                            PostCode = "5000"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Благоевград",
                            PostCode = "2700"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Шумен",
                            PostCode = "9700"
                        });
                });

            modelBuilder.Entity("ToyShop.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary Key for the Order entity");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key reference to the Address entity for delivery");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("money")
                        .HasComment("Delivery price associated with the order");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Unique order number with a maximum length constraint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the order was placed");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("Total price of the order in monetary terms");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Optional date when the order was sent");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Current status of the order");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasComment("Total price including delivery price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the User entity who placed the order");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ToyShop.Data.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the Order");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the Product in the order");

                    b.Property<int>("BoughtQuantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the bought products of same type");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary Key for the Product entity");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key reference to the Category entity");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Optional detailed description of the product with a maximum length constraint");

                    b.Property<int>("GlobalCategory")
                        .HasColumnType("int")
                        .HasComment("Global category of the product");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Url of the product image");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the product is currently available for purchase");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product with a maximum length constraint");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("Price of the product in monetary terms");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasComment("Optional foreign Key reference to the Promotion entity");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product available in stock");

                    b.Property<DateTime>("ReleasedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the product was released");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Short description of the product with a maximum length constraint");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Size of the product with a maximum length constraint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0920070-fe2a-4341-8f5d-8a3b3aefbdd2"),
                            CategoryId = 1,
                            Description = "Това еленче Рони, все още е налично и участва в каузата на бебе Божидар в групата PavelAndreev.BG. Всеки, който иска да го притежава може да се включи в каузата и да помогне на малкия Божидар.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/deer_Ronnie.jpg",
                            IsAvailable = true,
                            Name = "Еленче Рони",
                            Price = 35m,
                            PromotionId = 1,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7126),
                            ShortDescription = "Изработено от плюшена прежда, обезопасени очички на винт и гранулиран пълнеж.",
                            Size = "Височината е около 35см."
                        },
                        new
                        {
                            Id = new Guid("3a8838b3-7ebf-4e74-a181-f88318409f8a"),
                            CategoryId = 2,
                            Description = "Това сладко мече Дани вече се радва на много гушкане и игри.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/bear_Danny.jpg",
                            IsAvailable = true,
                            Name = "Мече Дани",
                            Price = 55m,
                            PromotionId = 1,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7323),
                            ShortDescription = "Това е мечето Дани, готово за предстоящите хладни дни с пухкава шапчица. ",
                            Size = "Височината е около 35см, без шапчицата."
                        },
                        new
                        {
                            Id = new Guid("8361b7d2-7ccf-40c6-b048-73c63526f896"),
                            CategoryId = 3,
                            Description = "Емблемата е бродирана и се заплаща допълнително спрямо размерите.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/giraffe_Sammie.jpg",
                            IsAvailable = true,
                            Name = "Жирафче Сами",
                            Price = 45m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7361),
                            ShortDescription = "Сами е изработен е от плюшена прежда, обезопасени очички и гранулиран пълнеж.",
                            Size = "Висок е малко над 35см."
                        },
                        new
                        {
                            Id = new Guid("fe6657c1-d56b-4a6f-ad66-6229d0c950c8"),
                            CategoryId = 4,
                            Description = "Идеална е за игри и гушкане.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/rabbit_Sophie.jpg",
                            IsAvailable = true,
                            Name = "Зайче Софи",
                            Price = 25m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7393),
                            ShortDescription = "Софи изработена от плюшена прежда, гранулиран пълнеж и обезопасени носле и очички.",
                            Size = "Софи е висока около 24см."
                        },
                        new
                        {
                            Id = new Guid("f327a6ce-8bb7-4e43-aa26-9d089abbba9b"),
                            CategoryId = 5,
                            Description = "Ако си търсите четириног приятел, който да няма нужда от разходки в горещите летни дни, храна, водичка и редовни прегледи при чичо доктор- ето го вашето решение!",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/dog_Bailey.jpg",
                            IsAvailable = true,
                            Name = "Кученце Бейли",
                            Price = 35m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7421),
                            ShortDescription = "Бейли е изработена от плюшена прежда, гранулиран пълнеж и обезопасени носле и очички.",
                            Size = "Височината му е около 30см."
                        },
                        new
                        {
                            Id = new Guid("b6e58206-6d6b-40fb-8186-8c99cb1a7c98"),
                            CategoryId = 12,
                            Description = "Времето навън все по-често ни напомня, че наближава зима, ❄️а какво по-хубаво от това през студените дни да се завиеш с пухкаво, меко и топло одеалце, а защо не и да подариш едно такова на малко сладурче?",
                            GlobalCategory = 1,
                            ImageUrl = "img/products/blanket_01.jpg",
                            IsAvailable = true,
                            Name = "Плетено Одеало",
                            Price = 30m,
                            PromotionId = 1,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7456),
                            ShortDescription = "Одеалцето е изработено от пухкава плюшена прежда.",
                            Size = "Размер 90х90."
                        },
                        new
                        {
                            Id = new Guid("13768d3c-35e4-4176-bfea-48ac3cba30e2"),
                            CategoryId = 2,
                            Description = "Тези сладки мечета вече се радват на много гушкане и игри.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/bear_Emma.jpg",
                            IsAvailable = true,
                            Name = "Мече Ема",
                            Price = 50m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7500),
                            ShortDescription = "Това е мечето Ема, готово за предстоящите хладни дни.",
                            Size = "Височината е около 35см"
                        },
                        new
                        {
                            Id = new Guid("60e857dd-e120-4660-bb2a-830c9b29f12b"),
                            CategoryId = 2,
                            Description = "Мечето Теди е изработено от плюшена прежда, обезапасени очички, носле и гранулиран пълнеж.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/bear_Teddy.jpg",
                            IsAvailable = true,
                            Name = "Мече Теди",
                            Price = 30m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7529),
                            ShortDescription = "Толкова е сладък, че ти идва да не спираш да го гушкаш.",
                            Size = "Височината е около 25см"
                        },
                        new
                        {
                            Id = new Guid("c129a3e4-ad44-4d56-afbd-e6bb9ae8f039"),
                            CategoryId = 6,
                            Description = "Изработена е от плюшена хипоалергенна прежда, има си обезопасени очички и пълнеж на гранули.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/unicorn_Polly.jpg",
                            IsAvailable = true,
                            Name = "Еднорог Поли",
                            Price = 45m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7557),
                            ShortDescription = "Поли е сладък, шарен еднорог готов за игри и много гушкане!",
                            Size = "Височината е около 35см"
                        },
                        new
                        {
                            Id = new Guid("2887b1e9-4fbd-4770-979e-ad3df48dbbcb"),
                            CategoryId = 4,
                            Description = "Лоли е ръчноизработена, като рокличката, обувчиците и лентата се свалят. Изработена е от плюшена прежда и пълна със силиконов гранулиран пух.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/rabbit_Lollie.jpg",
                            IsAvailable = true,
                            Name = "Зайче Лоли",
                            Price = 40m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7610),
                            ShortDescription = "Ето я и сладката Лоли, която е готова за щури игри.",
                            Size = "Лоли е висока около 35см."
                        },
                        new
                        {
                            Id = new Guid("6a16dc94-b3a8-4031-926e-6ddb8673e3f8"),
                            CategoryId = 7,
                            Description = "Всеки от тях е изключително сладък, пухкав и гушлив. Изработени са от плюшена прежда и са пълни със силиконов гранулиран пух.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/mouse_Jerry.jpg",
                            IsAvailable = true,
                            Name = "Мишле Джери",
                            Price = 35m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7640),
                            ShortDescription = "Това са малките мишоци, които изработваме съвсем отскоро.",
                            Size = "Височината им е около 25см"
                        },
                        new
                        {
                            Id = new Guid("3fedf4c5-f5d3-4c81-b188-fd603cb1cd49"),
                            CategoryId = 13,
                            Description = "Изработено е от плюшена прежда и е пълно със силиконов гранулиран пух.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/avocado_1.jpg",
                            IsAvailable = true,
                            Name = "Плюшено Авокадо",
                            Price = 20m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7670),
                            ShortDescription = "Малко, симпатично авокадо.",
                            Size = "Височината е около 15см"
                        },
                        new
                        {
                            Id = new Guid("f03a8a2e-09b6-4ea7-bacc-d1a62bdcf581"),
                            CategoryId = 4,
                            Description = "Цялата декорация е изработена от плюшена прежда, гранулиран пълнеж и обезопасени носле и очички. Вклюва ръчно изработено панерче, седем сладки яйчица и естествено едно пухкаво зайче.",
                            GlobalCategory = 0,
                            ImageUrl = "img/products/rabbit_Easter.jpg",
                            IsAvailable = true,
                            Name = "Великденски Заек",
                            Price = 25m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7696),
                            ShortDescription = "Ето една сладка идея за подарък изненада за ваш близък, а защо не и за самите вас.",
                            Size = "Височината на цялата декорация е около 18см."
                        },
                        new
                        {
                            Id = new Guid("c0b09eb6-ee22-4c16-bf36-3e3df280d27d"),
                            CategoryId = 10,
                            Description = "Всяка торта се изработва изцяло по желание на малкия рожденик и може да бъде използвана като част от празника в детската градина.",
                            GlobalCategory = 3,
                            ImageUrl = "img/products/cake_HarryPotter.jpg",
                            IsAvailable = true,
                            Name = "Торта Хари Потър",
                            Price = 15m,
                            PromotionId = 5,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7729),
                            ShortDescription = "Само за истински, малки фенове на Хари Потър! Минималният брой парчета е 15.",
                            Size = "Размерът зависи от броят на парчетата."
                        },
                        new
                        {
                            Id = new Guid("783b891c-c0bf-48d6-9aef-5948b3b94b3d"),
                            CategoryId = 10,
                            Description = "Всяка торта се изработва изцяло по желание на малкия рожденик и може да бъде използвана като част от празника в детската градина.",
                            GlobalCategory = 3,
                            ImageUrl = "img/products/cake_Safari.jpg",
                            IsAvailable = true,
                            Name = "Торта Сафари",
                            Price = 15m,
                            PromotionId = 5,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7762),
                            ShortDescription = "Тортата за всяко дете, любител на животни. Минималният брой парчета е 15.",
                            Size = "Размерът зависи от броят на парчетата."
                        },
                        new
                        {
                            Id = new Guid("8c892a4f-b6fd-480d-b3e3-7c9ad9abddc8"),
                            CategoryId = 10,
                            Description = "Всяка торта се изработва изцяло по желание на малкия рожденик и може да бъде използвана като част от празника в детската градина.",
                            GlobalCategory = 3,
                            ImageUrl = "img/products/cake_Frozen.jpg",
                            IsAvailable = true,
                            Name = "Торта Фроузън",
                            Price = 15m,
                            PromotionId = 5,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7790),
                            ShortDescription = "Тортата за малките госпожици, които харесват Елза и Анна . Минималният брой парчета е 15.",
                            Size = "Размерът зависи от броят на парчетата."
                        },
                        new
                        {
                            Id = new Guid("ba1e116a-6fa4-4292-b23b-44eb57d955a9"),
                            CategoryId = 11,
                            Description = "Всяка кошница се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_02.jpg",
                            IsAvailable = true,
                            Name = "Малка кошница",
                            Price = 25m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7817),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 20см в диаметър."
                        },
                        new
                        {
                            Id = new Guid("19cff9ce-cfdc-4ffc-84ee-7d86de96e803"),
                            CategoryId = 11,
                            Description = "Всяка декорация се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_06.jpg",
                            IsAvailable = true,
                            Name = "Малка кошница",
                            Price = 25m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7865),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 20см в диаметър."
                        },
                        new
                        {
                            Id = new Guid("120064d3-3e7e-45d6-9e1a-f8b8d8b89d37"),
                            CategoryId = 11,
                            Description = "Всяка декорация се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_03.jpg",
                            IsAvailable = true,
                            Name = "Малко панерче",
                            Price = 30m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7889),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 18см в диаметър."
                        },
                        new
                        {
                            Id = new Guid("68391496-887b-44b1-8fea-a3c4d0547b02"),
                            CategoryId = 11,
                            Description = "Всяка декорация се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_01.jpg",
                            IsAvailable = true,
                            Name = "Средна кошница ",
                            Price = 40m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7913),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 30см в диаметър."
                        },
                        new
                        {
                            Id = new Guid("613eeec4-6f10-4372-bd1d-07ec7a72e637"),
                            CategoryId = 11,
                            Description = "Всяка декорация се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_04.jpg",
                            IsAvailable = true,
                            Name = "Средна кошница ",
                            Price = 40m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7938),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 30см в диаметър."
                        },
                        new
                        {
                            Id = new Guid("0f78907b-70b3-4110-a2a2-f2fbc5e0bbf2"),
                            CategoryId = 11,
                            Description = "Всяка декорация се изработва изцяло по желание на клиента и може да бъде се използвана като декорация в дома или офиса.",
                            GlobalCategory = 2,
                            ImageUrl = "img/products/decoration_05.jpg",
                            IsAvailable = true,
                            Name = "Малко панерче",
                            Price = 20m,
                            Quantity = 5,
                            ReleasedOn = new DateTime(2024, 12, 11, 22, 6, 38, 202, DateTimeKind.Local).AddTicks(7961),
                            ShortDescription = "Красив и стилен подарък, дори с ограничен бюджет.",
                            Size = "Размерът e около 18см в диаметър."
                        });
                });

            modelBuilder.Entity("ToyShop.Data.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for the Promotion entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int")
                        .HasComment("Discount percentage offered by the promotion");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of the promotion");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Imgage Url of the promotion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the promotion with a maximum length constraint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of the promotion");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountPercentage = 20,
                            EndDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "img/promotions/winter-promotion.png",
                            Name = "Зимна Разпродажба",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DiscountPercentage = 30,
                            EndDate = new DateTime(2025, 5, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            ImageUrl = "img/promotions/example.png",
                            Name = "Пролетна Разпродажба",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DiscountPercentage = 20,
                            EndDate = new DateTime(2025, 8, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            ImageUrl = "img/promotions/example.png",
                            Name = "Лятна Разпродажба",
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DiscountPercentage = 30,
                            EndDate = new DateTime(2025, 11, 30, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            ImageUrl = "img/promotions/example.png",
                            Name = "Есенна Разпродажба",
                            StartDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DiscountPercentage = 10,
                            EndDate = new DateTime(2024, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            ImageUrl = "img/promotions/year-promotion.png",
                            Name = "Годишна разпродажба",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ToyShop.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary Key for the Review entity");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Optional comment made by the user in the review with a maximum length constraint");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the Product being reviewed");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating given by the user for the product");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the User who wrote the review");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ToyShop.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key reference to the Address of the user");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the user");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("First name of the user, required with a maximum length constraint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the user account is active");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Last name of the user, required with a maximum length constraint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Registration date of the user");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ToyShop.Data.Models.UserProductShoppingCart", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the User who owns the wishlist");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the Product in the wishlist");

                    b.Property<int>("BoughtQuantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the bought products of same type");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductShoppingCart");
                });

            modelBuilder.Entity("ToyShop.Data.Models.UserProductWhishlist", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the User who owns the wishlist");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key reference to the Product in the wishlist");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductWhishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ToyShop.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ToyShop.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ToyShop.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToyShop.Data.Models.Address", b =>
                {
                    b.HasOne("ToyShop.Data.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Order", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Address", "DeliveryAddress")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToyShop.Data.Models.OrderProduct", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Product", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.Promotion", "Promotion")
                        .WithMany("Products")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Category");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Review", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToyShop.Data.Models.User", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ToyShop.Data.Models.UserProductShoppingCart", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToyShop.Data.Models.UserProductWhishlist", b =>
                {
                    b.HasOne("ToyShop.Data.Models.Product", "Product")
                        .WithMany("UsersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToyShop.Data.Models.User", "User")
                        .WithMany("UsersProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Address", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ToyShop.Data.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Product", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UsersProducts");
                });

            modelBuilder.Entity("ToyShop.Data.Models.Promotion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ToyShop.Data.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UsersProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
